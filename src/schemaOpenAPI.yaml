openapi: 3.1.0
info:
  title: Fatura Personalizada API
  description: API para gerar Faturas Personalizadas integrado a OS do Omie
  version: 0.0.19
  contact:
    name: Fabio
    email: fabio@oondemand.com.br

servers:
  - url: https://api.oondemand.com.br/fatura-personalizada
    description: Servidor de Produção

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Usuario:
      type: object
      properties:
        nome:
          type: string
          description: Nome do usuário
        email:
          type: string
          description: Email do usuário
        senha:
          type: string
          description: Senha do usuário
        status:
          type: string
          enum: [ativo, inativo, arquivado]
          description: Status do usuário
        permissoes:
          type: array
          items:
            type: string
          description: Permissões do usuário
      required:
        - nome
        - email
        - senha
    Configuracao:
      type: object
      properties:
        nome:
          type: string
        codigo:
          type: string
        valor:
          type: string
        baseOmie:
          type: string
    BaseOmie:
      type: object
      properties:
        nome:
          type: string
        cnpj:
          type: string
        appKey:
          type: string
        appSecret:
          type: string
        status:
          type: string
          enum: [ativo, inativo, arquivado]
    Include:
      type: object
      properties:
        nome:
          type: string
        codigo:
          type: string
        descricao:
          type: string
        conteudo:
          type: string
        contenType:
          type: string
        status:
          type: string
          enum: [ativo, inativo, arquivado]
    Moeda:
      type: object
      properties:
        nome:
          type: string
        simbolo:
          type: string
        tipoCotacao:
          type: string
          enum: [cotacao, porcentagem, valorFixo]
        valor:
          type: number
        status:
          type: string
          enum: [ativo, inativo, arquivado]
    Template:
      type: object
      properties:
        nome:
          type: string
        descricao:
          type: string
        templateEjs:
          type: string
        status:
          type: string
          enum: [ativo, inativo, arquivado]
    Log:
      type: object
      properties:
        usuario:
          type: string
          description: ID do usuário que fez a requisição
        endpoint:
          type: string
        metodo:
          type: string
        ip:
          type: string
        dadosRequisicao:
          type: object
        dadosResposta:
          type: object
        statusResposta:
          type: integer

paths:
  /:
    get:
      summary: Verificar o status do serviço e a conexão com o MongoDB
      operationId: getStatus
      responses:
        '200':
          description: Status do serviço
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  database:
                    type: string

  /open-api:
    get:
      summary: Obter o esquema OpenAPI em formato JSON
      operationId: getOpenApi
      responses:
        '200':
          description: Esquema OpenAPI em formato JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  openapi:
                    type: string
                    example: "3.1.0"
                  info:
                    type: object
                    properties:
                      title:
                        type: string
                      description:
                        type: string
                      version:
                        type: string
                      contact:
                        type: object
                        properties:
                          name:
                            type: string
                          email:
                            type: string
                  servers:
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          type: string
                        description:
                          type: string
                  paths:
                    type: object
                  components:
                    type: object
                  security:
                    type: array
                    items:
                      type: object

  /auth/login:
    post:
      summary: Login de usuário
      operationId: loginUsuario
      requestBody:
        description: Dados de login
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                senha:
                  type: string
              required:
                - email
                - senha
      responses:
        '200':
          description: Token JWT gerado
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Credenciais inválidas

  /usuarios:
    get:
      summary: Listar todos os usuários
      operationId: listarUsuarios
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
    post:
      summary: Registrar um novo usuário
      operationId: registrarUsuario
      security:
        - BearerAuth: []
      requestBody:
        description: Dados para registrar um novo usuário
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuário registrado com sucesso

  /usuarios/{id}:
    get:
      summary: Obter um usuário pelo ID
      operationId: obterUsuario
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuário não encontrado
    put:
      summary: Atualizar um usuário pelo ID
      operationId: atualizarUsuario
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dados atualizados do usuário
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Usuário atualizado com sucesso
        '404':
          description: Usuário não encontrado

  /configuracoes:
    get:
      summary: Listar todas as configurações
      operationId: listarConfiguracoes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de configurações
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Configuracao'
    post:
      summary: Criar uma nova configuração
      operationId: criarConfiguracao
      security:
        - BearerAuth: []
      requestBody:
        description: Dados para criar uma nova configuração
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuracao'
      responses:
        '201':
          description: Configuração criada com sucesso

  /configuracoes/{id}:
    get:
      summary: Obter uma configuração pelo ID
      operationId: obterConfiguracao
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Configuração encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuracao'
        '404':
          description: Configuração não encontrada
    put:
      summary: Atualizar uma configuração pelo ID
      operationId: atualizarConfiguracao
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dados atualizados da configuração
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Configuracao'
      responses:
        '200':
          description: Configuração atualizada com sucesso
        '404':
          description: Configuração não encontrada
    delete:
      summary: Deletar uma configuração pelo ID
      operationId: deletarConfiguracao
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Configuração deletada com sucesso
        '404':
          description: Configuração não encontrada

  /base-omies:
    get:
      summary: Listar todas as bases Omie
      operationId: listarBasesOmie
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de bases Omie
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BaseOmie'
    post:
      summary: Criar uma nova base Omie
      operationId: criarBaseOmie
      security:
        - BearerAuth: []
      requestBody:
        description: Dados para criar uma nova base Omie
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseOmie'
      responses:
        '201':
          description: Base Omie criada com sucesso

  /base-omies/{id}:
    get:
      summary: Obter uma base Omie pelo ID
      operationId: obterBaseOmie
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Base Omie encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseOmie'
        '404':
          description: Base Omie não encontrada
    patch:
      summary: Atualizar uma base Omie pelo ID
      operationId: atualizarBaseOmie
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dados atualizados da base Omie
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseOmie'
      responses:
        '200':
          description: Base Omie atualizada com sucesso
        '404':
          description: Base Omie não encontrada

  /moedas:
    get:
      summary: Listar todas as moedas
      operationId: listarMoedas
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de moedas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Moeda'
    post:
      summary: Criar uma nova moeda
      operationId: criarMoeda
      security:
        - BearerAuth: []
      requestBody:
        description: Dados para criar uma nova moeda
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Moeda'
      responses:
        '201':
          description: Moeda criada com sucesso

  /moedas/{id}:
    get:
      summary: Obter uma moeda pelo ID
      operationId: obterMoeda
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Moeda encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Moeda'
        '404':
          description: Moeda não encontrada
    patch:
      summary: Atualizar uma moeda pelo ID
      operationId: atualizarMoeda
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dados atualizados da moeda
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Moeda'
      responses:
        '200':
          description: Moeda atualizada com sucesso
        '404':
          description: Moeda não encontrada

  /templates:
    get:
      summary: Listar todos os templates
      operationId: listarTemplates
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
    post:
      summary: Criar um novo template
      operationId: criarTemplate
      security:
        - BearerAuth: []
      requestBody:
        description: Dados para criar um novo template
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        '201':
          description: Template criado com sucesso

  /templates/{id}:
    get:
      summary: Obter um template pelo ID
      operationId: obterTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Template encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '404':
          description: Template não encontrado
    patch:
      summary: Atualizar um template pelo ID
      operationId: atualizarTemplate
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dados atualizados do template
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
      responses:
        '200':
          description: Template atualizado com sucesso
        '404':
          description: Template não encontrado

  /includes:
    get:
      summary: Listar todos os includes
      operationId: listarIncludes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista de includes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Include'
    post:
      summary: Criar um novo include
      operationId: criarInclude
      security:
        - BearerAuth: []
      requestBody:
        description: Dados para criar um novo include
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Include'
      responses:
        '201':
          description: Include criado com sucesso

  /includes/{id}:
    get:
      summary: Obter um include pelo ID
      operationId: obterInclude
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Include encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Include'
        '404':
          description: Include não encontrado
    patch:
      summary: Atualizar um include pelo ID
      operationId: atualizarInclude
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Dados atualizados do include
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Include'
      responses:
        '200':
          description: Include atualizado com sucesso
        '404':
          description: Include não encontrado
    
  /webhooks/gerar-invoice:
    post:
      summary: Webhook para gerar invoice
      operationId: gerarInvoiceWebhook
      requestBody:
        description: Dados do webhook
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appKey:
                  type: string
                event:
                  type: object
                ping:
                  type: string
      responses:
        '200':
          description: Webhook processado com sucesso
        '400':
          description: Dados incompletos
        '500':
          description: Erro ao processar o webhook

  /logs/rastreabilidade:
    get:
      summary: Obter logs de rastreabilidade
      operationId: getRastreabilidadeLogs
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: Número da página
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: Número de registros por página
      responses:
        '200':
          description: Lista de logs de rastreabilidade
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalLogs:
                    type: integer
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
        '500':
          description: Erro ao buscar logs